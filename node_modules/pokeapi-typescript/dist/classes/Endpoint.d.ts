import Collection from "@discordjs/collection";
import { IApiResourceList } from "../interfaces/Utility/ApiResourceList";
declare type EndpointParam = number;
declare class Endpoint<T> {
    protected resource: string;
    protected _list: IApiResourceList<T>;
    protected cache: Collection<number, T>;
    constructor(resource: any);
    /**
     * Retrieve a resource from the cache
     * @param {EndpointParam} param - The ID of the resource to retrieve from cache
     * @returns {?T}
     */
    get(param: EndpointParam): T;
    /**
     * Retrieve a resource from cache if it exists, or attempt to fetch it from the API
     * @param {EndpointParam} param - The ID of the resource to resolve
     * @returns {Promise<T>}
     */
    resolve(param: EndpointParam): Promise<T>;
    /**
     * Fetch a resource from the API
     * @param {EndpointParam} param - The ID of the item to fetch
     * @param {boolean} [cache=true] - Whether or not to cache this resource
     * @returns {Promise<T>}
     */
    fetch(param: EndpointParam, cache?: boolean): Promise<T>;
    /**
     * Fetches the paginated resource list from the API, or uses the internal cache if listAll() has been called.
     * @param {number} [limit=20] - How many resources to list
     * @param {offset} [offset=0]
     * @returns {Promise<NamedApiResourceList<T>>}
     */
    list(limit?: number, offset?: number): Promise<IApiResourceList<T>>;
    /**
     * Fetches the complete resource list from the API by making two calls.
     * Caches the list by default for API-less pagination
     * @param {boolean} [cache=true] - If the result should be cahced in-memory
     * @returns {Promise<NamedApiResourceList<T>>}
     */
    listAll(cache?: boolean): Promise<IApiResourceList<T>>;
    _cache(data: any): void;
}
export { Endpoint, EndpointParam };
