import { INamedApiResourceList } from "../interfaces/Utility/NamedApiResourceList";
import { Endpoint, EndpointParam } from "./Endpoint";
export declare type NamedEndpointParam = EndpointParam | string;
export declare class NamedEndpoint<T> extends Endpoint<T> {
    protected _list: INamedApiResourceList<T>;
    private _nameMap;
    constructor(resource: any);
    /**
     * Retrieve a resource from the cache by name or ID
     * @param {NamedEndpointParam} param - The name or ID of the resource to retrieve from cache
     * @returns {?T}
     */
    get(param: NamedEndpointParam): T;
    /**
     * Fetch a resource from the API
     * @param {NamedEndpointParam} param - The name orcID of the resource to fetch
     * @param {boolean} [cache=true] - Whether or not to cache this resource
     * @returns {Promise<T>}
     */
    fetch(param: NamedEndpointParam, cache?: boolean): Promise<T>;
    /**
     * Retrieve a resource from cache if it exists, or attempt to fetch it from the API
     * @param {EndpointParam} param - The ID of the resource to resolve
     * @returns {Promise<T>}
     */
    resolve(param: NamedEndpointParam): Promise<T>;
    /**
     * Fetches the paginated resource list from the API, or uses the internal cache if listAll() has been called.
     * @param {number} [limit=20] - How many resources to list
     * @param {offset} [offset=0]
     * @returns {Promise<NamedApiResourceList<T>>}
     */
    list(limit?: number, offset?: number): Promise<INamedApiResourceList<T>>;
    /**
     * Fetches the complete resource list from the API by making two calls.
     * Caches the list by default for API-less pagination
     * @param {boolean} [cache=true] - If the result should be cahced in-memory
     * @returns {Promise<NamedApiResourceList<T>>}
     */
    listAll(cache?: boolean): Promise<INamedApiResourceList<T>>;
    _cache(data: any): void;
}
