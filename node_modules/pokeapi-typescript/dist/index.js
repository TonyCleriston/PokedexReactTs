"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var Endpoint_1 = require("./classes/Endpoint");
var NamedEndpoint_1 = require("./classes/NamedEndpoint");
__export(require("./interfaces/Berries/Berry"));
var PokeAPI = /** @class */ (function () {
    function PokeAPI() {
    }
    PokeAPI.fromResource = function (apiResource) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, match, resource, id, endpoint;
            var _this = this;
            return __generator(this, function (_b) {
                _a = /([a-z-]+)\/(\d+)/.exec(apiResource.url), match = _a[0], resource = _a[1], id = _a[2];
                if (apiResource.endpoint) {
                    return [2 /*return*/, apiResource.endpoint.resolve(parseInt(id, 10))];
                }
                endpoint = Object.getOwnPropertyNames(this).find(function (prop) { return _this[prop].resource === resource; });
                return [2 /*return*/, this[endpoint].resolve(parseInt(id, 10))];
            });
        });
    };
    PokeAPI.Berry = new NamedEndpoint_1.NamedEndpoint("berry");
    PokeAPI.BerryFirmness = new NamedEndpoint_1.NamedEndpoint("berry-firmness");
    PokeAPI.BerryFlavor = new NamedEndpoint_1.NamedEndpoint("berry-flavor");
    PokeAPI.ContestType = new NamedEndpoint_1.NamedEndpoint("contest-type");
    PokeAPI.ContestEffect = new Endpoint_1.Endpoint("contest-effect");
    PokeAPI.SuperContestEffect = new Endpoint_1.Endpoint("super-contest-effect");
    PokeAPI.EncounterMethod = new NamedEndpoint_1.NamedEndpoint("encounter-method");
    PokeAPI.EncounterCondition = new NamedEndpoint_1.NamedEndpoint("encounter-condition");
    PokeAPI.EncounterConditionValue = new NamedEndpoint_1.NamedEndpoint("encounter-condition-value");
    PokeAPI.EvolutionChain = new Endpoint_1.Endpoint("evolution-chain");
    PokeAPI.EvolutionTrigger = new NamedEndpoint_1.NamedEndpoint("evolution-trigger");
    PokeAPI.Generaition = new NamedEndpoint_1.NamedEndpoint("generation");
    PokeAPI.Pokedex = new NamedEndpoint_1.NamedEndpoint("pokedex");
    PokeAPI.Version = new NamedEndpoint_1.NamedEndpoint("version");
    PokeAPI.VerionGroup = new NamedEndpoint_1.NamedEndpoint("version-group");
    PokeAPI.Item = new NamedEndpoint_1.NamedEndpoint("item");
    PokeAPI.ItemAttribute = new NamedEndpoint_1.NamedEndpoint("item-attribute");
    PokeAPI.ItemCategory = new NamedEndpoint_1.NamedEndpoint("item-category");
    PokeAPI.ItemFlingEffect = new NamedEndpoint_1.NamedEndpoint("item-fling-effect");
    PokeAPI.ItemPocket = new NamedEndpoint_1.NamedEndpoint("item-pocket");
    PokeAPI.Location = new NamedEndpoint_1.NamedEndpoint("location");
    PokeAPI.LocationArea = new NamedEndpoint_1.NamedEndpoint("location-area");
    PokeAPI.PalParkArea = new NamedEndpoint_1.NamedEndpoint("pal-park-area");
    PokeAPI.Region = new NamedEndpoint_1.NamedEndpoint("region");
    PokeAPI.Machine = new Endpoint_1.Endpoint("machine");
    PokeAPI.Move = new NamedEndpoint_1.NamedEndpoint("move");
    PokeAPI.MoveAilment = new NamedEndpoint_1.NamedEndpoint("move-ailment");
    PokeAPI.MoveBattleStyle = new NamedEndpoint_1.NamedEndpoint("move-battle-style");
    PokeAPI.MoveCategory = new NamedEndpoint_1.NamedEndpoint("move-category");
    PokeAPI.MoveDamageClass = new NamedEndpoint_1.NamedEndpoint("move-damage-class");
    PokeAPI.MoveLearnMethod = new NamedEndpoint_1.NamedEndpoint("move-learn-method");
    PokeAPI.MoveTarget = new NamedEndpoint_1.NamedEndpoint("move-target");
    PokeAPI.Ability = new NamedEndpoint_1.NamedEndpoint("ability");
    PokeAPI.Characteristic = new Endpoint_1.Endpoint("characteristic");
    PokeAPI.EggGroup = new NamedEndpoint_1.NamedEndpoint("egg-group");
    PokeAPI.Gender = new NamedEndpoint_1.NamedEndpoint("gender");
    PokeAPI.GrowthRate = new NamedEndpoint_1.NamedEndpoint("growth-rate");
    PokeAPI.Nature = new NamedEndpoint_1.NamedEndpoint("nature");
    PokeAPI.PokeathlonStat = new NamedEndpoint_1.NamedEndpoint("pokeathlon-stat");
    PokeAPI.Pokemon = new NamedEndpoint_1.NamedEndpoint("pokemon");
    PokeAPI.PokemonColor = new NamedEndpoint_1.NamedEndpoint("pokemon-color");
    PokeAPI.PokemonForm = new NamedEndpoint_1.NamedEndpoint("pokemon-form");
    PokeAPI.PokemonHabitat = new NamedEndpoint_1.NamedEndpoint("pokemon-habitat");
    PokeAPI.PokemonShape = new NamedEndpoint_1.NamedEndpoint("pokemon-shape");
    PokeAPI.PokemonSpecies = new NamedEndpoint_1.NamedEndpoint("pokemon-species");
    PokeAPI.Stat = new NamedEndpoint_1.NamedEndpoint("stat");
    PokeAPI.Type = new NamedEndpoint_1.NamedEndpoint("type");
    PokeAPI.Language = new NamedEndpoint_1.NamedEndpoint("language");
    return PokeAPI;
}());
module.exports = PokeAPI;
exports.default = PokeAPI;
//# sourceMappingURL=index.js.map